# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShapetoGeoJSONDockWidget
                                 A QGIS plugin
 Complemento para convertir Shape a GeoJSON
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-05-18
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Diana Sierra
        email                : idu058480@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


import os
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
import geopandas as gpd
import matplotlib.pyplot as plt
from qgis.core import QgsVectorLayer, QgsProject
from qgis.utils import iface
from pyproj import CRS

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Shape_GeoJSON_dockwidget_base.ui'))

class ShapetoGeoJSONDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(ShapetoGeoJSONDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Filtros de archivos
        self.qfw_cargar.setFilter("Archivos SHP (*.shp)")
        self.qfw_corte1.setFilter("Archivos SHP (*.shp)")
        self.qfw_corte2.setFilter("Archivos SHP (*.shp)")
        self.qfw_csv.setFilter("Archivo CSV (*.csv)")

        # Eventos
        self.btn_cargar.clicked.connect(self.cargar_datos)
        self.btn_exportar.clicked.connect(self.exportar_geojson)
        self.btn_corte.clicked.connect(self.realizar_corte)
        self.btn_crear_poligono.clicked.connect(self.crear_poligono_csv)

        self.gdf = None
        self.btn_exportar.setEnabled(False)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def cargar_datos(self):
        ruta = self.qfw_cargar.filePath()
        base = os.path.splitext(ruta)[0]

        if not ruta:
            QtWidgets.QMessageBox.warning(self, "Advertencia", "No se seleccionó ningún archivo.")
            return

        if not os.path.exists(base + ".shx") or not os.path.exists(base + ".dbf"):
            QtWidgets.QMessageBox.critical(self, "Error", "Faltan archivos necesarios (.shx o .dbf).")
            return

        try:
            os.environ['SHAPE_RESTORE_SHX'] = 'YES'
            self.gdf = gpd.read_file(ruta)
            self.gdf.plot()
            plt.show()
            self.btn_exportar.setEnabled(True)

            # Cargar capa en QGIS
            self._agregar_capa(ruta, "Shapefile cargado")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"No se pudo procesar el archivo:\n{str(e)}")

    def exportar_geojson(self):
        if self.gdf is None:
            QtWidgets.QMessageBox.warning(self, "Advertencia", "No hay datos cargados.")
            return

        ruta = self.qfw_cargar.filePath()
        geojson_path = os.path.splitext(ruta)[0] + ".geojson"

        try:
            self.gdf.to_file(geojson_path, driver='GeoJSON')
            QtWidgets.QMessageBox.information(self, "Conversión exitosa", f"Archivo guardado como:\n{geojson_path}")
            
            # Agregar a capas de QGIS
            self._agregar_capa(geojson_path, "GeoJSON exportado")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"No se pudo exportar:\n{str(e)}")

    def realizar_corte(self):
        ruta1 = self.qfw_corte1.filePath()
        ruta2 = self.qfw_corte2.filePath()

        if not ruta1 or not ruta2:
            QtWidgets.QMessageBox.warning(self, "Advertencia", "Debe seleccionar dos archivos SHP.")
            return

        try:
            gdf1 = gpd.read_file(ruta1)
            gdf2 = gpd.read_file(ruta2)
            interseccion = gpd.overlay(gdf1, gdf2, how='intersection')
            interseccion.plot()
            plt.show()

            salida = os.path.splitext(ruta1)[0] + "_corte.geojson"
            interseccion.to_file(salida, driver='GeoJSON')

            QtWidgets.QMessageBox.information(self, "Corte realizado", f"Archivo guardado como:\n{salida}")

            # Agregar a capas de QGIS
            self._agregar_capa(salida, "Corte Intersección")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error en el corte", str(e))

    def crear_poligono_csv(self):
        ruta_csv = self.qfw_csv.filePath()

        if not ruta_csv:
            QtWidgets.QMessageBox.warning(self, "Advertencia", "No se seleccionó ningún archivo CSV.")
            return

        try:
            import pandas as pd
            from shapely.geometry import Polygon

            df = pd.read_csv(ruta_csv)

            if {'lat', 'lon'}.issubset(df.columns):
                coords = list(zip(df['lon'], df['lat']))  # lon, lat → correcto
            elif {'x', 'y'}.issubset(df.columns):
                coords = list(zip(df['y'], df['x']))  # corregido: lon = y, lat = x
            else:
                QtWidgets.QMessageBox.critical(self, "Error",
                    "El CSV debe tener columnas 'lat' y 'lon' o 'x' y 'y'.")
                return

            poligono = Polygon(coords)
            gdf_poligono = gpd.GeoDataFrame(index=[0], crs="EPSG:4326", geometry=[poligono])
            gdf_poligono.plot()
            plt.show()

            salida = os.path.splitext(ruta_csv)[0] + "_poligono.geojson"
            gdf_poligono.to_file(salida, driver="GeoJSON")

            QtWidgets.QMessageBox.information(self, "Éxito", f"Polígono guardado en:\n{salida}")

            # Agregar a capas de QGIS
            self._agregar_capa(salida, "Polígono desde CSV")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"No se pudo crear el polígono:\n{str(e)}")




    def _agregar_capa(self, ruta, nombre_capa):
        """ Agrega una capa vectorial a QGIS """
        capa = QgsVectorLayer(ruta, nombre_capa, "ogr")
        if not capa.isValid():
            QtWidgets.QMessageBox.critical(self, "Error", f"No se pudo cargar la capa:\n{ruta}")
            return
        QgsProject.instance().addMapLayer(capa)
