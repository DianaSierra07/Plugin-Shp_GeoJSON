# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShapetoGeoJSON
                                 A QGIS plugin
 Complemento para convertir Shape a GeoJSON
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-18
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Diana Sierra
        email                : idu058480@usal.es
 ***************************************************************************/

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
import os.path

from .resources import *
from .Shape_GeoJSON_dockwidget import ShapetoGeoJSONDockWidget


class Shape_GeoJSON:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: QGIS interface instance.
        :type iface: QgsInterface
        """
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)

        # Localization
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n', f'ShapetoGeoJSON_{locale}.qm')

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Attributes
        self.actions = []
        self.menu = self.tr(u'&Shape a GeoJSON')
        self.toolbar = self.iface.addToolBar(u'ShapetoGeoJSON')
        self.toolbar.setObjectName(u'ShapetoGeoJSON')

        self.pluginIsActive = False
        self.dockwidget = None

    def tr(self, message):
        """Translation helper."""
        return QCoreApplication.translate('ShapetoGeoJSON', message)

    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True,
                   add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
        """Add toolbar/menu action."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip:
            action.setStatusTip(status_tip)
        if whats_this:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create menu entries and toolbar icons inside QGIS GUI."""
        icon_path = ':/plugins/Shape_GeoJSON/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Shape a GeoJSON'),
            callback=self.run,
            parent=self.iface.mainWindow()
        )

    def onClosePlugin(self):
        """Clean up when dockwidget is closed."""
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.pluginIsActive = False

    def unload(self):
        """Remove plugin menu item and icon."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Shape a GeoJSON'), action)
            self.iface.removeToolBarIcon(action)
        del self.toolbar

    def run(self):
        """Run the plugin."""
        if not self.pluginIsActive:
            self.pluginIsActive = True

            if self.dockwidget is None:
                self.dockwidget = ShapetoGeoJSONDockWidget()

            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
